// Code generated by dagger-compiler.  Do not edit.
package com.test.robotcontroller.event.handler;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<LogEventHandler>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code LogEventHandler} and its
 * dependencies.
 *
 * Being a {@code Provider<LogEventHandler>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<LogEventHandler>} and handling injection
 * of annotated fields.
 */
public final class LogEventHandler$$InjectAdapter extends Binding<LogEventHandler>
    implements Provider<LogEventHandler>, MembersInjector<LogEventHandler> {
  private Binding<com.test.robotcontroller.tts.TTSLogger> ttsLogger;

  public LogEventHandler$$InjectAdapter() {
    super("com.test.robotcontroller.event.handler.LogEventHandler", "members/com.test.robotcontroller.event.handler.LogEventHandler", NOT_SINGLETON, LogEventHandler.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    ttsLogger = (Binding<com.test.robotcontroller.tts.TTSLogger>) linker.requestBinding("com.test.robotcontroller.tts.TTSLogger", LogEventHandler.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(ttsLogger);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<LogEventHandler>}.
   */
  @Override
  public LogEventHandler get() {
    LogEventHandler result = new LogEventHandler();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<LogEventHandler>}.
   */
  @Override
  public void injectMembers(LogEventHandler object) {
    object.ttsLogger = ttsLogger.get();
  }

}
